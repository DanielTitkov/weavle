// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/DanielTitkov/weavle/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DanielTitkov/weavle/ent/sentence"
	"github.com/DanielTitkov/weavle/ent/story"
	"github.com/DanielTitkov/weavle/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Sentence is the client for interacting with the Sentence builders.
	Sentence *SentenceClient
	// Story is the client for interacting with the Story builders.
	Story *StoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Sentence = NewSentenceClient(c.config)
	c.Story = NewStoryClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Sentence: NewSentenceClient(cfg),
		Story:    NewStoryClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Sentence: NewSentenceClient(cfg),
		Story:    NewStoryClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Sentence.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Sentence.Use(hooks...)
	c.Story.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Sentence.Intercept(interceptors...)
	c.Story.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *SentenceMutation:
		return c.Sentence.mutate(ctx, m)
	case *StoryMutation:
		return c.Story.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// SentenceClient is a client for the Sentence schema.
type SentenceClient struct {
	config
}

// NewSentenceClient returns a client for the Sentence from the given config.
func NewSentenceClient(c config) *SentenceClient {
	return &SentenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sentence.Hooks(f(g(h())))`.
func (c *SentenceClient) Use(hooks ...Hook) {
	c.hooks.Sentence = append(c.hooks.Sentence, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sentence.Intercept(f(g(h())))`.
func (c *SentenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sentence = append(c.inters.Sentence, interceptors...)
}

// Create returns a builder for creating a Sentence entity.
func (c *SentenceClient) Create() *SentenceCreate {
	mutation := newSentenceMutation(c.config, OpCreate)
	return &SentenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sentence entities.
func (c *SentenceClient) CreateBulk(builders ...*SentenceCreate) *SentenceCreateBulk {
	return &SentenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sentence.
func (c *SentenceClient) Update() *SentenceUpdate {
	mutation := newSentenceMutation(c.config, OpUpdate)
	return &SentenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SentenceClient) UpdateOne(s *Sentence) *SentenceUpdateOne {
	mutation := newSentenceMutation(c.config, OpUpdateOne, withSentence(s))
	return &SentenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SentenceClient) UpdateOneID(id uuid.UUID) *SentenceUpdateOne {
	mutation := newSentenceMutation(c.config, OpUpdateOne, withSentenceID(id))
	return &SentenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sentence.
func (c *SentenceClient) Delete() *SentenceDelete {
	mutation := newSentenceMutation(c.config, OpDelete)
	return &SentenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SentenceClient) DeleteOne(s *Sentence) *SentenceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SentenceClient) DeleteOneID(id uuid.UUID) *SentenceDeleteOne {
	builder := c.Delete().Where(sentence.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SentenceDeleteOne{builder}
}

// Query returns a query builder for Sentence.
func (c *SentenceClient) Query() *SentenceQuery {
	return &SentenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSentence},
		inters: c.Interceptors(),
	}
}

// Get returns a Sentence entity by its id.
func (c *SentenceClient) Get(ctx context.Context, id uuid.UUID) (*Sentence, error) {
	return c.Query().Where(sentence.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SentenceClient) GetX(ctx context.Context, id uuid.UUID) *Sentence {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStory queries the story edge of a Sentence.
func (c *SentenceClient) QueryStory(s *Sentence) *StoryQuery {
	query := (&StoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sentence.Table, sentence.FieldID, id),
			sqlgraph.To(story.Table, story.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sentence.StoryTable, sentence.StoryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthor queries the author edge of a Sentence.
func (c *SentenceClient) QueryAuthor(s *Sentence) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sentence.Table, sentence.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sentence.AuthorTable, sentence.AuthorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SentenceClient) Hooks() []Hook {
	return c.hooks.Sentence
}

// Interceptors returns the client interceptors.
func (c *SentenceClient) Interceptors() []Interceptor {
	return c.inters.Sentence
}

func (c *SentenceClient) mutate(ctx context.Context, m *SentenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SentenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SentenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SentenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SentenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Sentence mutation op: %q", m.Op())
	}
}

// StoryClient is a client for the Story schema.
type StoryClient struct {
	config
}

// NewStoryClient returns a client for the Story from the given config.
func NewStoryClient(c config) *StoryClient {
	return &StoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `story.Hooks(f(g(h())))`.
func (c *StoryClient) Use(hooks ...Hook) {
	c.hooks.Story = append(c.hooks.Story, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `story.Intercept(f(g(h())))`.
func (c *StoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Story = append(c.inters.Story, interceptors...)
}

// Create returns a builder for creating a Story entity.
func (c *StoryClient) Create() *StoryCreate {
	mutation := newStoryMutation(c.config, OpCreate)
	return &StoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Story entities.
func (c *StoryClient) CreateBulk(builders ...*StoryCreate) *StoryCreateBulk {
	return &StoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Story.
func (c *StoryClient) Update() *StoryUpdate {
	mutation := newStoryMutation(c.config, OpUpdate)
	return &StoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoryClient) UpdateOne(s *Story) *StoryUpdateOne {
	mutation := newStoryMutation(c.config, OpUpdateOne, withStory(s))
	return &StoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoryClient) UpdateOneID(id uuid.UUID) *StoryUpdateOne {
	mutation := newStoryMutation(c.config, OpUpdateOne, withStoryID(id))
	return &StoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Story.
func (c *StoryClient) Delete() *StoryDelete {
	mutation := newStoryMutation(c.config, OpDelete)
	return &StoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoryClient) DeleteOne(s *Story) *StoryDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoryClient) DeleteOneID(id uuid.UUID) *StoryDeleteOne {
	builder := c.Delete().Where(story.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoryDeleteOne{builder}
}

// Query returns a query builder for Story.
func (c *StoryClient) Query() *StoryQuery {
	return &StoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStory},
		inters: c.Interceptors(),
	}
}

// Get returns a Story entity by its id.
func (c *StoryClient) Get(ctx context.Context, id uuid.UUID) (*Story, error) {
	return c.Query().Where(story.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoryClient) GetX(ctx context.Context, id uuid.UUID) *Story {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySentences queries the sentences edge of a Story.
func (c *StoryClient) QuerySentences(s *Story) *SentenceQuery {
	query := (&SentenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(story.Table, story.FieldID, id),
			sqlgraph.To(sentence.Table, sentence.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, story.SentencesTable, story.SentencesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoryClient) Hooks() []Hook {
	return c.hooks.Story
}

// Interceptors returns the client interceptors.
func (c *StoryClient) Interceptors() []Interceptor {
	return c.inters.Story
}

func (c *StoryClient) mutate(ctx context.Context, m *StoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Story mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySentences queries the sentences edge of a User.
func (c *UserClient) QuerySentences(u *User) *SentenceQuery {
	query := (&SentenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sentence.Table, sentence.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.SentencesTable, user.SentencesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Sentence, Story, User []ent.Hook
	}
	inters struct {
		Sentence, Story, User []ent.Interceptor
	}
)
