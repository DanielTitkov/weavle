// Code generated by ent, DO NOT EDIT.

package sentence

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sentence type in the database.
	Label = "sentence"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeStory holds the string denoting the story edge name in mutations.
	EdgeStory = "story"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// Table holds the table name of the sentence in the database.
	Table = "sentences"
	// StoryTable is the table that holds the story relation/edge.
	StoryTable = "sentences"
	// StoryInverseTable is the table name for the Story entity.
	// It exists in this package in order to avoid circular dependency with the "story" package.
	StoryInverseTable = "stories"
	// StoryColumn is the table column denoting the story relation/edge.
	StoryColumn = "story_sentences"
	// AuthorTable is the table that holds the author relation/edge. The primary key declared below.
	AuthorTable = "user_sentences"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
)

// Columns holds all SQL columns for sentence fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldCreatedAt,
	FieldOrder,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sentences"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"story_sentences",
}

var (
	// AuthorPrimaryKey and AuthorColumn2 are the table columns denoting the
	// primary key for the author relation (M2M).
	AuthorPrimaryKey = []string{"user_id", "sentence_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Sentence queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByStoryField orders the results by story field.
func ByStoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorCount orders the results by author count.
func ByAuthorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorStep(), opts...)
	}
}

// ByAuthor orders the results by author terms.
func ByAuthor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StoryTable, StoryColumn),
	)
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AuthorTable, AuthorPrimaryKey...),
	)
}
