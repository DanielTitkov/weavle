// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/weavle/ent/sentence"
	"github.com/DanielTitkov/weavle/ent/story"
	"github.com/DanielTitkov/weavle/ent/user"
	"github.com/google/uuid"
)

// SentenceCreate is the builder for creating a Sentence entity.
type SentenceCreate struct {
	config
	mutation *SentenceMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (sc *SentenceCreate) SetText(s string) *SentenceCreate {
	sc.mutation.SetText(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SentenceCreate) SetCreatedAt(t time.Time) *SentenceCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SentenceCreate) SetNillableCreatedAt(t *time.Time) *SentenceCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetOrder sets the "order" field.
func (sc *SentenceCreate) SetOrder(i int) *SentenceCreate {
	sc.mutation.SetOrder(i)
	return sc
}

// SetID sets the "id" field.
func (sc *SentenceCreate) SetID(u uuid.UUID) *SentenceCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SentenceCreate) SetNillableID(u *uuid.UUID) *SentenceCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetStoryID sets the "story" edge to the Story entity by ID.
func (sc *SentenceCreate) SetStoryID(id uuid.UUID) *SentenceCreate {
	sc.mutation.SetStoryID(id)
	return sc
}

// SetStory sets the "story" edge to the Story entity.
func (sc *SentenceCreate) SetStory(s *Story) *SentenceCreate {
	return sc.SetStoryID(s.ID)
}

// AddAuthorIDs adds the "author" edge to the User entity by IDs.
func (sc *SentenceCreate) AddAuthorIDs(ids ...uuid.UUID) *SentenceCreate {
	sc.mutation.AddAuthorIDs(ids...)
	return sc
}

// AddAuthor adds the "author" edges to the User entity.
func (sc *SentenceCreate) AddAuthor(u ...*User) *SentenceCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddAuthorIDs(ids...)
}

// Mutation returns the SentenceMutation object of the builder.
func (sc *SentenceCreate) Mutation() *SentenceMutation {
	return sc.mutation
}

// Save creates the Sentence in the database.
func (sc *SentenceCreate) Save(ctx context.Context) (*Sentence, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SentenceCreate) SaveX(ctx context.Context) *Sentence {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SentenceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SentenceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SentenceCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sentence.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := sentence.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SentenceCreate) check() error {
	if _, ok := sc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Sentence.text"`)}
	}
	if v, ok := sc.mutation.Text(); ok {
		if err := sentence.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Sentence.text": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Sentence.created_at"`)}
	}
	if _, ok := sc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Sentence.order"`)}
	}
	if v, ok := sc.mutation.Order(); ok {
		if err := sentence.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Sentence.order": %w`, err)}
		}
	}
	if _, ok := sc.mutation.StoryID(); !ok {
		return &ValidationError{Name: "story", err: errors.New(`ent: missing required edge "Sentence.story"`)}
	}
	if len(sc.mutation.AuthorIDs()) == 0 {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "Sentence.author"`)}
	}
	return nil
}

func (sc *SentenceCreate) sqlSave(ctx context.Context) (*Sentence, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SentenceCreate) createSpec() (*Sentence, *sqlgraph.CreateSpec) {
	var (
		_node = &Sentence{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sentence.Table, sqlgraph.NewFieldSpec(sentence.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Text(); ok {
		_spec.SetField(sentence.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sentence.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.Order(); ok {
		_spec.SetField(sentence.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := sc.mutation.StoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentence.StoryTable,
			Columns: []string{sentence.StoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.story_sentences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SentenceCreateBulk is the builder for creating many Sentence entities in bulk.
type SentenceCreateBulk struct {
	config
	builders []*SentenceCreate
}

// Save creates the Sentence entities in the database.
func (scb *SentenceCreateBulk) Save(ctx context.Context) ([]*Sentence, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sentence, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SentenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SentenceCreateBulk) SaveX(ctx context.Context) []*Sentence {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SentenceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SentenceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
