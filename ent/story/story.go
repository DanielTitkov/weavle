// Code generated by ent, DO NOT EDIT.

package story

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the story type in the database.
	Label = "story"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSentences holds the string denoting the sentences edge name in mutations.
	EdgeSentences = "sentences"
	// Table holds the table name of the story in the database.
	Table = "stories"
	// SentencesTable is the table that holds the sentences relation/edge.
	SentencesTable = "sentences"
	// SentencesInverseTable is the table name for the Sentence entity.
	// It exists in this package in order to avoid circular dependency with the "sentence" package.
	SentencesInverseTable = "sentences"
	// SentencesColumn is the table column denoting the sentences relation/edge.
	SentencesColumn = "story_sentences"
)

// Columns holds all SQL columns for story fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusOpen is the default value of the Status enum.
const DefaultStatus = StatusOpen

// Status values.
const (
	StatusOpen    Status = "open"
	StatusClosed  Status = "closed"
	StatusWaiting Status = "waiting"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOpen, StatusClosed, StatusWaiting:
		return nil
	default:
		return fmt.Errorf("story: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Story queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySentencesCount orders the results by sentences count.
func BySentencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentencesStep(), opts...)
	}
}

// BySentences orders the results by sentences terms.
func BySentences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSentencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentencesTable, SentencesColumn),
	)
}
