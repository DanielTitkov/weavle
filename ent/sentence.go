// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/weavle/ent/sentence"
	"github.com/DanielTitkov/weavle/ent/story"
	"github.com/google/uuid"
)

// Sentence is the model entity for the Sentence schema.
type Sentence struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SentenceQuery when eager-loading is set.
	Edges           SentenceEdges `json:"edges"`
	story_sentences *uuid.UUID
	selectValues    sql.SelectValues
}

// SentenceEdges holds the relations/edges for other nodes in the graph.
type SentenceEdges struct {
	// Story holds the value of the story edge.
	Story *Story `json:"story,omitempty"`
	// Author holds the value of the author edge.
	Author []*User `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StoryOrErr returns the Story value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SentenceEdges) StoryOrErr() (*Story, error) {
	if e.loadedTypes[0] {
		if e.Story == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: story.Label}
		}
		return e.Story, nil
	}
	return nil, &NotLoadedError{edge: "story"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading.
func (e SentenceEdges) AuthorOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sentence) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentence.FieldOrder:
			values[i] = new(sql.NullInt64)
		case sentence.FieldText:
			values[i] = new(sql.NullString)
		case sentence.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case sentence.FieldID:
			values[i] = new(uuid.UUID)
		case sentence.ForeignKeys[0]: // story_sentences
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sentence fields.
func (s *Sentence) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentence.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case sentence.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				s.Text = value.String
			}
		case sentence.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sentence.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				s.Order = int(value.Int64)
			}
		case sentence.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field story_sentences", values[i])
			} else if value.Valid {
				s.story_sentences = new(uuid.UUID)
				*s.story_sentences = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sentence.
// This includes values selected through modifiers, order, etc.
func (s *Sentence) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryStory queries the "story" edge of the Sentence entity.
func (s *Sentence) QueryStory() *StoryQuery {
	return NewSentenceClient(s.config).QueryStory(s)
}

// QueryAuthor queries the "author" edge of the Sentence entity.
func (s *Sentence) QueryAuthor() *UserQuery {
	return NewSentenceClient(s.config).QueryAuthor(s)
}

// Update returns a builder for updating this Sentence.
// Note that you need to call Sentence.Unwrap() before calling this method if this Sentence
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sentence) Update() *SentenceUpdateOne {
	return NewSentenceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sentence entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sentence) Unwrap() *Sentence {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sentence is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sentence) String() string {
	var builder strings.Builder
	builder.WriteString("Sentence(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("text=")
	builder.WriteString(s.Text)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", s.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Sentences is a parsable slice of Sentence.
type Sentences []*Sentence
