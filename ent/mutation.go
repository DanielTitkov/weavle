// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DanielTitkov/weavle/ent/predicate"
	"github.com/DanielTitkov/weavle/ent/sentence"
	"github.com/DanielTitkov/weavle/ent/story"
	"github.com/DanielTitkov/weavle/ent/user"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSentence = "Sentence"
	TypeStory    = "Story"
	TypeUser     = "User"
)

// SentenceMutation represents an operation that mutates the Sentence nodes in the graph.
type SentenceMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	text          *string
	created_at    *time.Time
	_order        *int
	add_order     *int
	clearedFields map[string]struct{}
	story         *uuid.UUID
	clearedstory  bool
	author        map[uuid.UUID]struct{}
	removedauthor map[uuid.UUID]struct{}
	clearedauthor bool
	done          bool
	oldValue      func(context.Context) (*Sentence, error)
	predicates    []predicate.Sentence
}

var _ ent.Mutation = (*SentenceMutation)(nil)

// sentenceOption allows management of the mutation configuration using functional options.
type sentenceOption func(*SentenceMutation)

// newSentenceMutation creates new mutation for the Sentence entity.
func newSentenceMutation(c config, op Op, opts ...sentenceOption) *SentenceMutation {
	m := &SentenceMutation{
		config:        c,
		op:            op,
		typ:           TypeSentence,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSentenceID sets the ID field of the mutation.
func withSentenceID(id uuid.UUID) sentenceOption {
	return func(m *SentenceMutation) {
		var (
			err   error
			once  sync.Once
			value *Sentence
		)
		m.oldValue = func(ctx context.Context) (*Sentence, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sentence.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSentence sets the old Sentence of the mutation.
func withSentence(node *Sentence) sentenceOption {
	return func(m *SentenceMutation) {
		m.oldValue = func(context.Context) (*Sentence, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SentenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SentenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Sentence entities.
func (m *SentenceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SentenceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SentenceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sentence.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *SentenceMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *SentenceMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Sentence entity.
// If the Sentence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SentenceMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *SentenceMutation) ResetText() {
	m.text = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SentenceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SentenceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Sentence entity.
// If the Sentence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SentenceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SentenceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetOrder sets the "order" field.
func (m *SentenceMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *SentenceMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Sentence entity.
// If the Sentence object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SentenceMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *SentenceMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *SentenceMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *SentenceMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetStoryID sets the "story" edge to the Story entity by id.
func (m *SentenceMutation) SetStoryID(id uuid.UUID) {
	m.story = &id
}

// ClearStory clears the "story" edge to the Story entity.
func (m *SentenceMutation) ClearStory() {
	m.clearedstory = true
}

// StoryCleared reports if the "story" edge to the Story entity was cleared.
func (m *SentenceMutation) StoryCleared() bool {
	return m.clearedstory
}

// StoryID returns the "story" edge ID in the mutation.
func (m *SentenceMutation) StoryID() (id uuid.UUID, exists bool) {
	if m.story != nil {
		return *m.story, true
	}
	return
}

// StoryIDs returns the "story" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoryID instead. It exists only for internal usage by the builders.
func (m *SentenceMutation) StoryIDs() (ids []uuid.UUID) {
	if id := m.story; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStory resets all changes to the "story" edge.
func (m *SentenceMutation) ResetStory() {
	m.story = nil
	m.clearedstory = false
}

// AddAuthorIDs adds the "author" edge to the User entity by ids.
func (m *SentenceMutation) AddAuthorIDs(ids ...uuid.UUID) {
	if m.author == nil {
		m.author = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.author[ids[i]] = struct{}{}
	}
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *SentenceMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *SentenceMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// RemoveAuthorIDs removes the "author" edge to the User entity by IDs.
func (m *SentenceMutation) RemoveAuthorIDs(ids ...uuid.UUID) {
	if m.removedauthor == nil {
		m.removedauthor = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.author, ids[i])
		m.removedauthor[ids[i]] = struct{}{}
	}
}

// RemovedAuthor returns the removed IDs of the "author" edge to the User entity.
func (m *SentenceMutation) RemovedAuthorIDs() (ids []uuid.UUID) {
	for id := range m.removedauthor {
		ids = append(ids, id)
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
func (m *SentenceMutation) AuthorIDs() (ids []uuid.UUID) {
	for id := range m.author {
		ids = append(ids, id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *SentenceMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
	m.removedauthor = nil
}

// Where appends a list predicates to the SentenceMutation builder.
func (m *SentenceMutation) Where(ps ...predicate.Sentence) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SentenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SentenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Sentence, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SentenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SentenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Sentence).
func (m *SentenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SentenceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.text != nil {
		fields = append(fields, sentence.FieldText)
	}
	if m.created_at != nil {
		fields = append(fields, sentence.FieldCreatedAt)
	}
	if m._order != nil {
		fields = append(fields, sentence.FieldOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SentenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sentence.FieldText:
		return m.Text()
	case sentence.FieldCreatedAt:
		return m.CreatedAt()
	case sentence.FieldOrder:
		return m.Order()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SentenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sentence.FieldText:
		return m.OldText(ctx)
	case sentence.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sentence.FieldOrder:
		return m.OldOrder(ctx)
	}
	return nil, fmt.Errorf("unknown Sentence field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SentenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sentence.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case sentence.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sentence.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Sentence field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SentenceMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, sentence.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SentenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sentence.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SentenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sentence.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Sentence numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SentenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SentenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SentenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Sentence nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SentenceMutation) ResetField(name string) error {
	switch name {
	case sentence.FieldText:
		m.ResetText()
		return nil
	case sentence.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sentence.FieldOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown Sentence field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SentenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.story != nil {
		edges = append(edges, sentence.EdgeStory)
	}
	if m.author != nil {
		edges = append(edges, sentence.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SentenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sentence.EdgeStory:
		if id := m.story; id != nil {
			return []ent.Value{*id}
		}
	case sentence.EdgeAuthor:
		ids := make([]ent.Value, 0, len(m.author))
		for id := range m.author {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SentenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedauthor != nil {
		edges = append(edges, sentence.EdgeAuthor)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SentenceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sentence.EdgeAuthor:
		ids := make([]ent.Value, 0, len(m.removedauthor))
		for id := range m.removedauthor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SentenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstory {
		edges = append(edges, sentence.EdgeStory)
	}
	if m.clearedauthor {
		edges = append(edges, sentence.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SentenceMutation) EdgeCleared(name string) bool {
	switch name {
	case sentence.EdgeStory:
		return m.clearedstory
	case sentence.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SentenceMutation) ClearEdge(name string) error {
	switch name {
	case sentence.EdgeStory:
		m.ClearStory()
		return nil
	}
	return fmt.Errorf("unknown Sentence unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SentenceMutation) ResetEdge(name string) error {
	switch name {
	case sentence.EdgeStory:
		m.ResetStory()
		return nil
	case sentence.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Sentence edge %s", name)
}

// StoryMutation represents an operation that mutates the Story nodes in the graph.
type StoryMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	status           *story.Status
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	sentences        map[uuid.UUID]struct{}
	removedsentences map[uuid.UUID]struct{}
	clearedsentences bool
	done             bool
	oldValue         func(context.Context) (*Story, error)
	predicates       []predicate.Story
}

var _ ent.Mutation = (*StoryMutation)(nil)

// storyOption allows management of the mutation configuration using functional options.
type storyOption func(*StoryMutation)

// newStoryMutation creates new mutation for the Story entity.
func newStoryMutation(c config, op Op, opts ...storyOption) *StoryMutation {
	m := &StoryMutation{
		config:        c,
		op:            op,
		typ:           TypeStory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoryID sets the ID field of the mutation.
func withStoryID(id uuid.UUID) storyOption {
	return func(m *StoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Story
		)
		m.oldValue = func(ctx context.Context) (*Story, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Story.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStory sets the old Story of the mutation.
func withStory(node *Story) storyOption {
	return func(m *StoryMutation) {
		m.oldValue = func(context.Context) (*Story, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Story entities.
func (m *StoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Story.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *StoryMutation) SetStatus(s story.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *StoryMutation) Status() (r story.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldStatus(ctx context.Context) (v story.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *StoryMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *StoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Story entity.
// If the Story object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSentenceIDs adds the "sentences" edge to the Sentence entity by ids.
func (m *StoryMutation) AddSentenceIDs(ids ...uuid.UUID) {
	if m.sentences == nil {
		m.sentences = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sentences[ids[i]] = struct{}{}
	}
}

// ClearSentences clears the "sentences" edge to the Sentence entity.
func (m *StoryMutation) ClearSentences() {
	m.clearedsentences = true
}

// SentencesCleared reports if the "sentences" edge to the Sentence entity was cleared.
func (m *StoryMutation) SentencesCleared() bool {
	return m.clearedsentences
}

// RemoveSentenceIDs removes the "sentences" edge to the Sentence entity by IDs.
func (m *StoryMutation) RemoveSentenceIDs(ids ...uuid.UUID) {
	if m.removedsentences == nil {
		m.removedsentences = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.sentences, ids[i])
		m.removedsentences[ids[i]] = struct{}{}
	}
}

// RemovedSentences returns the removed IDs of the "sentences" edge to the Sentence entity.
func (m *StoryMutation) RemovedSentencesIDs() (ids []uuid.UUID) {
	for id := range m.removedsentences {
		ids = append(ids, id)
	}
	return
}

// SentencesIDs returns the "sentences" edge IDs in the mutation.
func (m *StoryMutation) SentencesIDs() (ids []uuid.UUID) {
	for id := range m.sentences {
		ids = append(ids, id)
	}
	return
}

// ResetSentences resets all changes to the "sentences" edge.
func (m *StoryMutation) ResetSentences() {
	m.sentences = nil
	m.clearedsentences = false
	m.removedsentences = nil
}

// Where appends a list predicates to the StoryMutation builder.
func (m *StoryMutation) Where(ps ...predicate.Story) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Story, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Story).
func (m *StoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.status != nil {
		fields = append(fields, story.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, story.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, story.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case story.FieldStatus:
		return m.Status()
	case story.FieldCreatedAt:
		return m.CreatedAt()
	case story.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case story.FieldStatus:
		return m.OldStatus(ctx)
	case story.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case story.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Story field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case story.FieldStatus:
		v, ok := value.(story.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case story.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case story.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Story field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Story numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Story nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoryMutation) ResetField(name string) error {
	switch name {
	case story.FieldStatus:
		m.ResetStatus()
		return nil
	case story.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case story.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Story field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sentences != nil {
		edges = append(edges, story.EdgeSentences)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case story.EdgeSentences:
		ids := make([]ent.Value, 0, len(m.sentences))
		for id := range m.sentences {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsentences != nil {
		edges = append(edges, story.EdgeSentences)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case story.EdgeSentences:
		ids := make([]ent.Value, 0, len(m.removedsentences))
		for id := range m.removedsentences {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsentences {
		edges = append(edges, story.EdgeSentences)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoryMutation) EdgeCleared(name string) bool {
	switch name {
	case story.EdgeSentences:
		return m.clearedsentences
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Story unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoryMutation) ResetEdge(name string) error {
	switch name {
	case story.EdgeSentences:
		m.ResetSentences()
		return nil
	}
	return fmt.Errorf("unknown Story edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	ip_address       *string
	clearedFields    map[string]struct{}
	sentences        map[uuid.UUID]struct{}
	removedsentences map[uuid.UUID]struct{}
	clearedsentences bool
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIPAddress sets the "ip_address" field.
func (m *UserMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *UserMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *UserMutation) ResetIPAddress() {
	m.ip_address = nil
}

// AddSentenceIDs adds the "sentences" edge to the Sentence entity by ids.
func (m *UserMutation) AddSentenceIDs(ids ...uuid.UUID) {
	if m.sentences == nil {
		m.sentences = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sentences[ids[i]] = struct{}{}
	}
}

// ClearSentences clears the "sentences" edge to the Sentence entity.
func (m *UserMutation) ClearSentences() {
	m.clearedsentences = true
}

// SentencesCleared reports if the "sentences" edge to the Sentence entity was cleared.
func (m *UserMutation) SentencesCleared() bool {
	return m.clearedsentences
}

// RemoveSentenceIDs removes the "sentences" edge to the Sentence entity by IDs.
func (m *UserMutation) RemoveSentenceIDs(ids ...uuid.UUID) {
	if m.removedsentences == nil {
		m.removedsentences = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.sentences, ids[i])
		m.removedsentences[ids[i]] = struct{}{}
	}
}

// RemovedSentences returns the removed IDs of the "sentences" edge to the Sentence entity.
func (m *UserMutation) RemovedSentencesIDs() (ids []uuid.UUID) {
	for id := range m.removedsentences {
		ids = append(ids, id)
	}
	return
}

// SentencesIDs returns the "sentences" edge IDs in the mutation.
func (m *UserMutation) SentencesIDs() (ids []uuid.UUID) {
	for id := range m.sentences {
		ids = append(ids, id)
	}
	return
}

// ResetSentences resets all changes to the "sentences" edge.
func (m *UserMutation) ResetSentences() {
	m.sentences = nil
	m.clearedsentences = false
	m.removedsentences = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.ip_address != nil {
		fields = append(fields, user.FieldIPAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldIPAddress:
		return m.IPAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldIPAddress:
		return m.OldIPAddress(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sentences != nil {
		edges = append(edges, user.EdgeSentences)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSentences:
		ids := make([]ent.Value, 0, len(m.sentences))
		for id := range m.sentences {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsentences != nil {
		edges = append(edges, user.EdgeSentences)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSentences:
		ids := make([]ent.Value, 0, len(m.removedsentences))
		for id := range m.removedsentences {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsentences {
		edges = append(edges, user.EdgeSentences)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSentences:
		return m.clearedsentences
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSentences:
		m.ResetSentences()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
