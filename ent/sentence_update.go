// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DanielTitkov/weavle/ent/predicate"
	"github.com/DanielTitkov/weavle/ent/sentence"
	"github.com/DanielTitkov/weavle/ent/story"
	"github.com/DanielTitkov/weavle/ent/user"
	"github.com/google/uuid"
)

// SentenceUpdate is the builder for updating Sentence entities.
type SentenceUpdate struct {
	config
	hooks    []Hook
	mutation *SentenceMutation
}

// Where appends a list predicates to the SentenceUpdate builder.
func (su *SentenceUpdate) Where(ps ...predicate.Sentence) *SentenceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetText sets the "text" field.
func (su *SentenceUpdate) SetText(s string) *SentenceUpdate {
	su.mutation.SetText(s)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SentenceUpdate) SetCreatedAt(t time.Time) *SentenceUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SentenceUpdate) SetNillableCreatedAt(t *time.Time) *SentenceUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetOrder sets the "order" field.
func (su *SentenceUpdate) SetOrder(i int) *SentenceUpdate {
	su.mutation.ResetOrder()
	su.mutation.SetOrder(i)
	return su
}

// AddOrder adds i to the "order" field.
func (su *SentenceUpdate) AddOrder(i int) *SentenceUpdate {
	su.mutation.AddOrder(i)
	return su
}

// SetStoryID sets the "story" edge to the Story entity by ID.
func (su *SentenceUpdate) SetStoryID(id uuid.UUID) *SentenceUpdate {
	su.mutation.SetStoryID(id)
	return su
}

// SetStory sets the "story" edge to the Story entity.
func (su *SentenceUpdate) SetStory(s *Story) *SentenceUpdate {
	return su.SetStoryID(s.ID)
}

// AddAuthorIDs adds the "author" edge to the User entity by IDs.
func (su *SentenceUpdate) AddAuthorIDs(ids ...uuid.UUID) *SentenceUpdate {
	su.mutation.AddAuthorIDs(ids...)
	return su
}

// AddAuthor adds the "author" edges to the User entity.
func (su *SentenceUpdate) AddAuthor(u ...*User) *SentenceUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddAuthorIDs(ids...)
}

// Mutation returns the SentenceMutation object of the builder.
func (su *SentenceUpdate) Mutation() *SentenceMutation {
	return su.mutation
}

// ClearStory clears the "story" edge to the Story entity.
func (su *SentenceUpdate) ClearStory() *SentenceUpdate {
	su.mutation.ClearStory()
	return su
}

// ClearAuthor clears all "author" edges to the User entity.
func (su *SentenceUpdate) ClearAuthor() *SentenceUpdate {
	su.mutation.ClearAuthor()
	return su
}

// RemoveAuthorIDs removes the "author" edge to User entities by IDs.
func (su *SentenceUpdate) RemoveAuthorIDs(ids ...uuid.UUID) *SentenceUpdate {
	su.mutation.RemoveAuthorIDs(ids...)
	return su
}

// RemoveAuthor removes "author" edges to User entities.
func (su *SentenceUpdate) RemoveAuthor(u ...*User) *SentenceUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveAuthorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SentenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SentenceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SentenceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SentenceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SentenceUpdate) check() error {
	if v, ok := su.mutation.Text(); ok {
		if err := sentence.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Sentence.text": %w`, err)}
		}
	}
	if v, ok := su.mutation.Order(); ok {
		if err := sentence.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Sentence.order": %w`, err)}
		}
	}
	if _, ok := su.mutation.StoryID(); su.mutation.StoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Sentence.story"`)
	}
	return nil
}

func (su *SentenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentence.Table, sentence.Columns, sqlgraph.NewFieldSpec(sentence.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Text(); ok {
		_spec.SetField(sentence.FieldText, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(sentence.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Order(); ok {
		_spec.SetField(sentence.FieldOrder, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedOrder(); ok {
		_spec.AddField(sentence.FieldOrder, field.TypeInt, value)
	}
	if su.mutation.StoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentence.StoryTable,
			Columns: []string{sentence.StoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentence.StoryTable,
			Columns: []string{sentence.StoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAuthorIDs(); len(nodes) > 0 && !su.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SentenceUpdateOne is the builder for updating a single Sentence entity.
type SentenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentenceMutation
}

// SetText sets the "text" field.
func (suo *SentenceUpdateOne) SetText(s string) *SentenceUpdateOne {
	suo.mutation.SetText(s)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SentenceUpdateOne) SetCreatedAt(t time.Time) *SentenceUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SentenceUpdateOne) SetNillableCreatedAt(t *time.Time) *SentenceUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetOrder sets the "order" field.
func (suo *SentenceUpdateOne) SetOrder(i int) *SentenceUpdateOne {
	suo.mutation.ResetOrder()
	suo.mutation.SetOrder(i)
	return suo
}

// AddOrder adds i to the "order" field.
func (suo *SentenceUpdateOne) AddOrder(i int) *SentenceUpdateOne {
	suo.mutation.AddOrder(i)
	return suo
}

// SetStoryID sets the "story" edge to the Story entity by ID.
func (suo *SentenceUpdateOne) SetStoryID(id uuid.UUID) *SentenceUpdateOne {
	suo.mutation.SetStoryID(id)
	return suo
}

// SetStory sets the "story" edge to the Story entity.
func (suo *SentenceUpdateOne) SetStory(s *Story) *SentenceUpdateOne {
	return suo.SetStoryID(s.ID)
}

// AddAuthorIDs adds the "author" edge to the User entity by IDs.
func (suo *SentenceUpdateOne) AddAuthorIDs(ids ...uuid.UUID) *SentenceUpdateOne {
	suo.mutation.AddAuthorIDs(ids...)
	return suo
}

// AddAuthor adds the "author" edges to the User entity.
func (suo *SentenceUpdateOne) AddAuthor(u ...*User) *SentenceUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddAuthorIDs(ids...)
}

// Mutation returns the SentenceMutation object of the builder.
func (suo *SentenceUpdateOne) Mutation() *SentenceMutation {
	return suo.mutation
}

// ClearStory clears the "story" edge to the Story entity.
func (suo *SentenceUpdateOne) ClearStory() *SentenceUpdateOne {
	suo.mutation.ClearStory()
	return suo
}

// ClearAuthor clears all "author" edges to the User entity.
func (suo *SentenceUpdateOne) ClearAuthor() *SentenceUpdateOne {
	suo.mutation.ClearAuthor()
	return suo
}

// RemoveAuthorIDs removes the "author" edge to User entities by IDs.
func (suo *SentenceUpdateOne) RemoveAuthorIDs(ids ...uuid.UUID) *SentenceUpdateOne {
	suo.mutation.RemoveAuthorIDs(ids...)
	return suo
}

// RemoveAuthor removes "author" edges to User entities.
func (suo *SentenceUpdateOne) RemoveAuthor(u ...*User) *SentenceUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveAuthorIDs(ids...)
}

// Where appends a list predicates to the SentenceUpdate builder.
func (suo *SentenceUpdateOne) Where(ps ...predicate.Sentence) *SentenceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SentenceUpdateOne) Select(field string, fields ...string) *SentenceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sentence entity.
func (suo *SentenceUpdateOne) Save(ctx context.Context) (*Sentence, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SentenceUpdateOne) SaveX(ctx context.Context) *Sentence {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SentenceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SentenceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SentenceUpdateOne) check() error {
	if v, ok := suo.mutation.Text(); ok {
		if err := sentence.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Sentence.text": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Order(); ok {
		if err := sentence.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Sentence.order": %w`, err)}
		}
	}
	if _, ok := suo.mutation.StoryID(); suo.mutation.StoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Sentence.story"`)
	}
	return nil
}

func (suo *SentenceUpdateOne) sqlSave(ctx context.Context) (_node *Sentence, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentence.Table, sentence.Columns, sqlgraph.NewFieldSpec(sentence.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sentence.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentence.FieldID)
		for _, f := range fields {
			if !sentence.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Text(); ok {
		_spec.SetField(sentence.FieldText, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(sentence.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Order(); ok {
		_spec.SetField(sentence.FieldOrder, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedOrder(); ok {
		_spec.AddField(sentence.FieldOrder, field.TypeInt, value)
	}
	if suo.mutation.StoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentence.StoryTable,
			Columns: []string{sentence.StoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentence.StoryTable,
			Columns: []string{sentence.StoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(story.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAuthorIDs(); len(nodes) > 0 && !suo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentence.AuthorTable,
			Columns: sentence.AuthorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sentence{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentence.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
